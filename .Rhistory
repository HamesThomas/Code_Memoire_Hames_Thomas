h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.1), method = "Brent", lower = -1, upper= 0)
Optimization
Optimization = optim(f = algo_f , par = c(0.1))#, method = "Brent", lower = -1, upper= 0)
Optimization
Optimization = optim(f = algo_f , par = c(0.1), method = "Brent", lower = -1, upper= 0)
Optimization
g = 0.05
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_f <- function(f) {
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.1), method = "Brent", lower = -1, upper= 0)
Optimization
r = 0.025
g = 0.05
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_f <- function(f) {
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.1), method = "Brent", lower = -1, upper= 1)
Optimization
r = 0.025
g = 0.05
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_f <- function(f) {
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.1), method = "Brent", lower = 0, upper= 1)
Optimization
T = 10
r = 0.025
g = 0.025
sigma = 0.15
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
sigma
algo_f <- function(f) {
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.1), method = "Brent", lower = 0, upper= 1)
Optimization
algo_f <- function(f) {
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.1), method = "Brent", lower = -1, upper= 0)
Optimization
algo_f <- function(f) {
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
T = 10
r = 0.025
g = 0.015
sigma = 0.15
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_f <- function(f) {
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
f[1] = 0.02
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) )
f[1] = 0.0
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) )
f[1] = 0.01
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) )
sigma
r
g
algo_f <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
f
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
f = 0.015
sigma = 0.15
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
f = 0.005
sigma = 0.15
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
f = 0.01
sigma = 0.15
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
g = Optimization$par
g
T = 10
r = 0.025
f = 0.01
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
g = Optimization$par
T = 10
r = 0.025
f = 0.005
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
T = 10
r = 0.025
f = 0.015
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
f
g
T = 10
r = 0.025
f = 0.0188
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
g_optim = Optimization$par
T = 10
r = 0.025
f = 0.005
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
g_optim = Optimization$par
T = 10
r = 0.025
f = 0.003
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(g) {
h_1 = (((r - f - g[1] + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f - g[1] - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f * T) * pnorm(h_1) + exp((g[1] - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
g_optim = Optimization$par
G_T = P*exp(g_optim)
g = 0.015
f
g
algo_g <- function(g) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
f
algo_g <- function(g) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
f = Optimization$par
f
g
algo_g <- function(g) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.005), method = "Brent", lower = 0, upper= 1)
Optimization
f = Optimization$par
algo_g <- function(g) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.1), method = "Brent", lower = 0, upper= 1)
Optimization
f = Optimization$par
algo_g <- function(g) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = 0, upper= 1)
Optimization
f = Optimization$par
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 1)
Optimization
f = Optimization$par
algo_f <- function(f) {
h_1 = (((r -f[1] -g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r -f[1] -g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g-r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_f , par = c(0.1), method = "Brent", lower = 0, upper= 1)
Optimization
f
algo_g <- function(g) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 1)
Optimization
f
f[1]
rm(f)
algo_g <- function(g) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 1)
Optimization
rm(Optimization)
algo_g <- function(g) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 1)
Optimization
g
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 1)
Optimization
f
G_T = P*exp(g_optim)
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 0)
Optimization
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 0)
Optimization
r = 0.02
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 0)
Optimization
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 0)
Optimization
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(0.5), method = "Brent", lower = -1, upper= 1)
Optimization
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(-0.1), method = "Brent", lower = -1, upper= 1)
Optimization
g
x = 55
T = 10
r = 0.025
g = 0.02
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(-0.1), method = "Brent", lower = -1, upper= 1)
Optimization
T = 10
r = 0.025
g = 0.02
sigma = 0.075
sigma_sq = sigma^2
e = 0.015
P = 100000
P_commercial = 100000
P_invested = P_commercial - P_commercial * e
## Let's suppose an initial cost of 0
algo_g <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(f = algo_g , par = c(-0.1), method = "Brent", lower = -1, upper= 0)
Optimization
f = Optimization$par
Optimization = optim(f = algo_g , par = c(0.1), method = "Brent", lower = -1, upper= 0)
Optimization
Optimization = optim(fn = algo_g , par = c(0.1), method = "Brent", lower = -1, upper= 0)
Optimization
Optimization = optim(fn = algo_g , par = c(1), method = "Brent", lower = -1, upper= 0)
Optimization
algo_f <- function(f) {
h_1 = (((r - f[1] - g + (sigma^2)/2))*T)/(sigma*sqrt(T))
h_2 = -(((r - f[1] - g - (sigma^2)/2))*T)/(sigma*sqrt(T))
return(abs(P*(1.05) -  p_55_10 * P * (exp(-f[1] * T) * pnorm(h_1) + exp((g - r) * T) *pnorm(h_2)) ))
}
Optimization = optim(fn = algo_f , par = c(1), method = "Brent", lower = -1, upper= 0)
Optimization
if(!require(devtools)){install.packages("devtools")}
if(!require(roxygen2)){devtools::install_github("klutometis/roxygen")}
devtools::create("Extended_Mort2DSmooth")
devtools::create("ExtendedMort2DSmooth")
devtools::install_github("HamesThomas/Code_Memoire_Hames_Thomas")
if(!require(devtools)){install.packages("devtools")}
devtools::install_github("lvaudor/graphiT")
findmypath=function(dir,file){
path=system.file(dir,file,package="ExtendedMort2DSmooth")
return(path)
}
dir
dir()
ls()
cd
setwd("~/Documents/Sciences_Actuarielles/Mémoire/Code_Memoire_Hames_Thomas")
devtools::create("ExtendedMort2DSmooth")
devtools::install("ExtendedMort2DSmooth")
Mort2Dsmooth_Binomial_logit()
libeary("ExtendedMort2DSmooth")
library("ExtendedMort2DSmooth")
Mort2Dsmooth_Binomial_logit()
help(ExtendedMort2DSmooth)
rm(list = ls())
rm(Mort2Dsmooth_Binomial_cloglog)
rm(Mort2Dsmooth_Binomial_cloglog())
devtools::install_github("HamesThomas/Code_Memoire_Hames_Thomas")
devtools::install_github("HamesThomas/Code_Memoire_Hames_Thomas/ExtendedMort2DSmooth")
library("ExtendedMort2DSmooth")
Mort2Dsmooth_Binomial_cloglog()
Mort2Dsmooth_Binomial_cloglog
